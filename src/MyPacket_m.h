//
// Generated file, do not edit! Created by nedtool 5.6 from MyPacket.msg.
//

#ifndef __INET_MYPACKET_M_H
#define __INET_MYPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class MyPacket;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>MyPacket.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // Generic application packet
 * //
 * // TODO: rename to ApplicationHeader and remove ByteCountChunk from ApplicationHeaderSerializer
 * class MyPacket extends FieldsChunk
 * {
 *     int sourceId;
 *     double period;
 *     simtime_t sendTime;
 *     double xSend;
 *     double ySend;
 *     int msgNum;
 *     simtime_t time;
 * }
 * </pre>
 */
class MyPacket : public ::inet::FieldsChunk
{
  protected:
    int sourceId = 0;
    double period = 0;
    omnetpp::simtime_t sendTime = SIMTIME_ZERO;
    double xSend = 0;
    double ySend = 0;
    int msgNum = 0;
    omnetpp::simtime_t time = SIMTIME_ZERO;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket();
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const override {return new MyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
    virtual double getPeriod() const;
    virtual void setPeriod(double period);
    virtual omnetpp::simtime_t getSendTime() const;
    virtual void setSendTime(omnetpp::simtime_t sendTime);
    virtual double getXSend() const;
    virtual void setXSend(double xSend);
    virtual double getYSend() const;
    virtual void setYSend(double ySend);
    virtual int getMsgNum() const;
    virtual void setMsgNum(int msgNum);
    virtual omnetpp::simtime_t getTime() const;
    virtual void setTime(omnetpp::simtime_t time);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_MYPACKET_M_H

